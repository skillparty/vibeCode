{"version":3,"file":"static/js/409.e2619809.chunk.js","mappings":"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","sources":["utils/NetworkNodes.ts"],"sourcesContent":["import { BasePattern } from './BasePattern';\nimport { PatternConfig } from '../types';\n\ninterface NetworkNode {\n  x: number;\n  y: number;\n  vx: number; // velocity x\n  vy: number; // velocity y\n  char: string;\n  color: string;\n  connections: number[];\n  activity: number; // 0-1, affects brightness\n  type: 'server' | 'client' | 'router' | 'database';\n  age: number;\n}\n\ninterface Connection {\n  from: number;\n  to: number;\n  strength: number; // 0-1\n  activity: number; // 0-1, animated\n  char: string;\n  color: string;\n}\n\n/**\n * NetworkNodes pattern creates a connected node visualization\n * Features moving nodes with dynamic connections and data flow animation\n */\nexport class NetworkNodes extends BasePattern {\n  private nodes: NetworkNode[] = [];\n  private connections: Connection[] = [];\n  private maxNodes: number = 20;\n  private maxConnections: number = 30;\n  private connectionDistance: number = 15;\n  private nodeSpeed: number = 2;\n  private activityTimer: number = 0;\n  private spawnTimer: number = 0;\n  private spawnInterval: number = 3000; // 3 seconds between new nodes\n  \n  // Character sets for different node types\n  private nodeChars = {\n    server: ['█', '▓', '▒'],\n    client: ['●', '○', '◦'],\n    router: ['◆', '◇', '◈'],\n    database: ['■', '□', '▫']\n  };\n  \n  // Connection characters for data flow\n  private connectionChars = ['-', '=', '≡', '~', '·', ' '];\n  \n  constructor(ctx: CanvasRenderingContext2D, config: PatternConfig) {\n    super(ctx, config, 'network-nodes');\n    this.applyDensityConfig(config.density || 'medium');\n    this.applySpeedConfig(config.speed || 'medium');\n  }\n  \n  public initialize(): void {\n    this.isInitialized = true;\n    this.nodes = [];\n    this.connections = [];\n    this.activityTimer = 0;\n    this.spawnTimer = 0;\n    \n    // Set canvas properties\n    this.ctx.font = `${this.config.fontSize || 12}px ${this.config.fontFamily || 'Courier New, Monaco, Consolas, monospace'}`;\n    this.ctx.textBaseline = 'top';\n    this.ctx.textAlign = 'left';\n    \n    // Calculate connection distance based on grid size\n    this.connectionDistance = Math.min(this.gridWidth, this.gridHeight) / 4;\n    \n    // Create initial nodes\n    this.createInitialNodes();\n    \n    // Create initial connections\n    this.updateConnections();\n  }\n  \n  private createInitialNodes(): void {\n    const initialNodeCount = Math.floor(this.maxNodes * 0.6);\n    \n    for (let i = 0; i < initialNodeCount; i++) {\n      this.createNode();\n    }\n  }\n  \n  private createNode(): void {\n    if (this.nodes.length >= this.maxNodes) return;\n    \n    const nodeTypes: Array<'server' | 'client' | 'router' | 'database'> = ['server', 'client', 'router', 'database'];\n    const type = nodeTypes[Math.floor(Math.random() * nodeTypes.length)];\n    \n    const node: NetworkNode = {\n      x: this.randomRange(2, this.gridWidth - 2),\n      y: this.randomRange(2, this.gridHeight - 2),\n      vx: this.randomRange(-this.nodeSpeed, this.nodeSpeed),\n      vy: this.randomRange(-this.nodeSpeed, this.nodeSpeed),\n      char: this.getCharForNodeType(type),\n      color: this.getColorForNodeType(type),\n      connections: [],\n      activity: Math.random(),\n      type: type,\n      age: 0\n    };\n    \n    this.nodes.push(node);\n  }\n  \n  private getCharForNodeType(type: 'server' | 'client' | 'router' | 'database'): string {\n    const chars = this.nodeChars[type];\n    return chars[Math.floor(Math.random() * chars.length)];\n  }\n  \n  private getColorForNodeType(type: 'server' | 'client' | 'router' | 'database'): string {\n    const theme = this.config.currentTheme || 'matrix';\n    \n    switch (theme) {\n      case 'matrix':\n        switch (type) {\n          case 'server': return '#00ff00';\n          case 'client': return '#88ff88';\n          case 'router': return '#44ff44';\n          case 'database': return '#00cc00';\n        }\n        break;\n      case 'terminal':\n        switch (type) {\n          case 'server': return '#00ff00';\n          case 'client': return '#ffff00';\n          case 'router': return '#ff8800';\n          case 'database': return '#88ff88';\n        }\n        break;\n      case 'retro':\n        switch (type) {\n          case 'server': return '#ff6b35';\n          case 'client': return '#ffaa44';\n          case 'router': return '#ff8822';\n          case 'database': return '#cc5500';\n        }\n        break;\n      case 'blue':\n        switch (type) {\n          case 'server': return '#00bfff';\n          case 'client': return '#88ccff';\n          case 'router': return '#44aaff';\n          case 'database': return '#0088cc';\n        }\n        break;\n    }\n    return '#00ff00';\n  }\n  \n  private updateConnections(): void {\n    // Clear existing connections\n    this.connections = [];\n    \n    // Clear node connections\n    this.nodes.forEach(node => {\n      node.connections = [];\n    });\n    \n    // Create new connections based on distance\n    for (let i = 0; i < this.nodes.length; i++) {\n      for (let j = i + 1; j < this.nodes.length; j++) {\n        const node1 = this.nodes[i];\n        const node2 = this.nodes[j];\n        \n        const distance = this.getDistance(node1.x, node1.y, node2.x, node2.y);\n        \n        if (distance <= this.connectionDistance && this.connections.length < this.maxConnections) {\n          // Create connection with probability based on distance\n          const connectionProbability = 1 - (distance / this.connectionDistance);\n          \n          if (Math.random() < connectionProbability * 0.7) {\n            const connection: Connection = {\n              from: i,\n              to: j,\n              strength: connectionProbability,\n              activity: Math.random(),\n              char: this.getConnectionChar(),\n              color: this.getConnectionColor(node1, node2)\n            };\n            \n            this.connections.push(connection);\n            node1.connections.push(j);\n            node2.connections.push(i);\n          }\n        }\n      }\n    }\n  }\n  \n  private getDistance(x1: number, y1: number, x2: number, y2: number): number {\n    return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n  }\n  \n  private getConnectionChar(): string {\n    return this.connectionChars[Math.floor(Math.random() * this.connectionChars.length)];\n  }\n  \n  private getConnectionColor(node1: NetworkNode, node2: NetworkNode): string {\n    // Blend colors of connected nodes\n    const theme = this.config.currentTheme || 'matrix';\n    \n    switch (theme) {\n      case 'matrix': return '#004400';\n      case 'terminal': return '#444400';\n      case 'retro': return '#442200';\n      case 'blue': return '#002244';\n      default: return '#004400';\n    }\n  }\n  \n  public update(deltaTime: number): void {\n    if (!this.isInitialized) return;\n    \n    const deltaSeconds = deltaTime / 1000;\n    this.activityTimer += deltaTime;\n    this.spawnTimer += deltaTime;\n    \n    // Spawn new nodes periodically\n    if (this.spawnTimer >= this.spawnInterval && this.nodes.length < this.maxNodes) {\n      this.createNode();\n      this.spawnTimer = 0;\n      this.updateConnections();\n    }\n    \n    // Update nodes\n    this.updateNodes(deltaSeconds);\n    \n    // Update connections activity\n    this.updateConnectionActivity(deltaSeconds);\n    \n    // Periodically update connections based on new positions\n    if (this.activityTimer > 1000) { // Every second\n      this.updateConnections();\n      this.activityTimer = 0;\n    }\n  }\n  \n  private updateNodes(deltaSeconds: number): void {\n    this.nodes.forEach((node, index) => {\n      // Update position\n      node.x += node.vx * deltaSeconds;\n      node.y += node.vy * deltaSeconds;\n      \n      // Bounce off walls\n      if (node.x <= 1 || node.x >= this.gridWidth - 1) {\n        node.vx *= -1;\n        node.x = this.clamp(node.x, 1, this.gridWidth - 1);\n      }\n      \n      if (node.y <= 1 || node.y >= this.gridHeight - 1) {\n        node.vy *= -1;\n        node.y = this.clamp(node.y, 1, this.gridHeight - 1);\n      }\n      \n      // Update activity (creates pulsing effect)\n      node.activity = 0.3 + 0.7 * Math.sin(this.activityTimer * 0.001 + index);\n      \n      // Age the node\n      node.age += deltaSeconds;\n      \n      // Occasionally change direction slightly\n      if (Math.random() < 0.01) {\n        node.vx += this.randomRange(-0.5, 0.5);\n        node.vy += this.randomRange(-0.5, 0.5);\n        \n        // Limit speed\n        const speed = Math.sqrt(node.vx ** 2 + node.vy ** 2);\n        if (speed > this.nodeSpeed) {\n          node.vx = (node.vx / speed) * this.nodeSpeed;\n          node.vy = (node.vy / speed) * this.nodeSpeed;\n        }\n      }\n    });\n  }\n  \n  private updateConnectionActivity(deltaSeconds: number): void {\n    this.connections.forEach((connection, index) => {\n      // Animate connection activity\n      connection.activity = 0.2 + 0.8 * Math.sin(this.activityTimer * 0.002 + index * 0.5);\n      \n      // Occasionally change connection character for data flow effect\n      if (Math.random() < 0.1) {\n        connection.char = this.getConnectionChar();\n      }\n    });\n  }\n  \n  public render(): void {\n    // Clear canvas with dark background\n    this.ctx.fillStyle = this.getBackgroundColor();\n    this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    \n    if (!this.isInitialized) return;\n    \n    // Render connections first (so they appear behind nodes)\n    this.renderConnections();\n    \n    // Render nodes\n    this.renderNodes();\n    \n    // Render network info\n    this.renderNetworkInfo();\n  }\n  \n  private renderConnections(): void {\n    this.connections.forEach(connection => {\n      const fromNode = this.nodes[connection.from];\n      const toNode = this.nodes[connection.to];\n      \n      if (!fromNode || !toNode) return;\n      \n      // Calculate connection line\n      const dx = toNode.x - fromNode.x;\n      const dy = toNode.y - fromNode.y;\n      const distance = Math.sqrt(dx ** 2 + dy ** 2);\n      \n      if (distance < 1) return;\n      \n      const steps = Math.floor(distance);\n      const stepX = dx / steps;\n      const stepY = dy / steps;\n      \n      // Set connection color with activity-based alpha\n      const alpha = connection.activity * connection.strength * 0.7;\n      this.ctx.fillStyle = this.applyAlpha(connection.color, alpha);\n      \n      // Draw connection line with characters\n      for (let i = 1; i < steps; i++) {\n        const x = Math.floor(fromNode.x + stepX * i);\n        const y = Math.floor(fromNode.y + stepY * i);\n        \n        if (x >= 0 && x < this.gridWidth && y >= 0 && y < this.gridHeight) {\n          // Vary character based on position for data flow effect\n          const flowChar = i % 3 === 0 ? connection.char : (Math.random() < 0.3 ? '·' : ' ');\n          if (flowChar !== ' ') {\n            this.drawChar(flowChar, x, y);\n          }\n        }\n      }\n    });\n  }\n  \n  private renderNodes(): void {\n    this.nodes.forEach(node => {\n      const x = Math.floor(node.x);\n      const y = Math.floor(node.y);\n      \n      if (x >= 0 && x < this.gridWidth && y >= 0 && y < this.gridHeight) {\n        // Apply activity-based brightness\n        const alpha = 0.5 + 0.5 * node.activity;\n        this.ctx.fillStyle = this.applyAlpha(node.color, alpha);\n        \n        this.drawChar(node.char, x, y);\n        \n        // Add connection count indicator for important nodes\n        if (node.connections.length > 3) {\n          this.ctx.fillStyle = this.applyAlpha('#ffffff', alpha * 0.5);\n          this.drawChar('+', x + 1, y);\n        }\n      }\n    });\n  }\n  \n  private renderNetworkInfo(): void {\n    if (this.gridHeight < 2 || this.gridWidth < 25) return;\n    \n    const info = `Network | Nodes: ${this.nodes.length} | Connections: ${this.connections.length}`;\n    \n    // Render info text\n    this.ctx.fillStyle = this.getInfoColor();\n    for (let i = 0; i < Math.min(info.length, this.gridWidth); i++) {\n      this.drawChar(info[i], i, 0);\n    }\n  }\n  \n  private getBackgroundColor(): string {\n    switch (this.config.currentTheme || 'matrix') {\n      case 'matrix': return '#000000';\n      case 'terminal': return '#001100';\n      case 'retro': return '#110800';\n      case 'blue': return '#000811';\n      default: return '#000000';\n    }\n  }\n  \n  private getInfoColor(): string {\n    switch (this.config.currentTheme || 'matrix') {\n      case 'matrix': return '#002200';\n      case 'terminal': return '#222200';\n      case 'retro': return '#221100';\n      case 'blue': return '#001122';\n      default: return '#002200';\n    }\n  }\n  \n  private applyAlpha(color: string, alpha: number): string {\n    // Convert hex color to rgba with alpha\n    if (color.startsWith('#')) {\n      const r = parseInt(color.slice(1, 3), 16);\n      const g = parseInt(color.slice(3, 5), 16);\n      const b = parseInt(color.slice(5, 7), 16);\n      return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n    }\n    \n    // If already rgba, modify alpha\n    if (color.startsWith('rgba')) {\n      return color.replace(/[\\d\\.]+\\)$/g, `${alpha})`);\n    }\n    \n    // If rgb, convert to rgba\n    if (color.startsWith('rgb')) {\n      return color.replace('rgb', 'rgba').replace(')', `, ${alpha})`);\n    }\n    \n    return color;\n  }\n  \n  private applyDensityConfig(density: string): void {\n    switch (density) {\n      case 'low':\n        this.maxNodes = 10;\n        this.maxConnections = 15;\n        this.connectionDistance = Math.min(this.gridWidth, this.gridHeight) / 3;\n        break;\n      case 'medium':\n        this.maxNodes = 20;\n        this.maxConnections = 30;\n        this.connectionDistance = Math.min(this.gridWidth, this.gridHeight) / 4;\n        break;\n      case 'high':\n        this.maxNodes = 35;\n        this.maxConnections = 50;\n        this.connectionDistance = Math.min(this.gridWidth, this.gridHeight) / 5;\n        break;\n    }\n  }\n  \n  private applySpeedConfig(speed: string): void {\n    switch (speed) {\n      case 'slow':\n        this.nodeSpeed = 1;\n        this.spawnInterval = 5000;\n        break;\n      case 'medium':\n        this.nodeSpeed = 2;\n        this.spawnInterval = 3000;\n        break;\n      case 'fast':\n        this.nodeSpeed = 4;\n        this.spawnInterval = 1500;\n        break;\n    }\n  }\n  \n  public onResize(gridWidth: number, gridHeight: number): void {\n    super.onResize(gridWidth, gridHeight);\n    \n    if (this.isInitialized) {\n      // Update connection distance based on new grid size\n      this.connectionDistance = Math.min(gridWidth, gridHeight) / 4;\n      \n      // Remove nodes that are now outside the grid\n      this.nodes = this.nodes.filter(node => \n        node.x >= 1 && node.x < gridWidth - 1 && \n        node.y >= 1 && node.y < gridHeight - 1\n      );\n      \n      // Update connections\n      this.updateConnections();\n    }\n  }\n  \n  public setConfig(config: Partial<PatternConfig>): void {\n    super.setConfig(config);\n    \n    if (config.density) {\n      this.applyDensityConfig(config.density);\n      if (this.isInitialized) {\n        this.updateConnections();\n      }\n    }\n    \n    if (config.speed) {\n      this.applySpeedConfig(config.speed);\n    }\n    \n    // Update colors if theme changed\n    if (config.currentTheme) {\n      this.nodes.forEach(node => {\n        node.color = this.getColorForNodeType(node.type);\n      });\n      \n      this.connections.forEach(connection => {\n        const fromNode = this.nodes[connection.from];\n        const toNode = this.nodes[connection.to];\n        if (fromNode && toNode) {\n          connection.color = this.getConnectionColor(fromNode, toNode);\n        }\n      });\n    }\n  }\n  \n  public cleanup(): void {\n    this.isInitialized = false;\n    this.nodes = [];\n    this.connections = [];\n    this.activityTimer = 0;\n    this.spawnTimer = 0;\n    this.animationState = {};\n  }\n  \n  /**\n   * Get current animation state for debugging\n   */\n  public getAnimationState(): any {\n    return {\n      nodeCount: this.nodes.length,\n      connectionCount: this.connections.length,\n      maxNodes: this.maxNodes,\n      maxConnections: this.maxConnections,\n      connectionDistance: this.connectionDistance,\n      nodeSpeed: this.nodeSpeed,\n      averageActivity: this.nodes.reduce((sum, node) => sum + node.activity, 0) / this.nodes.length || 0\n    };\n  }\n}"],"names":["NetworkNodes","BasePattern","constructor","ctx","config","super","nodes","connections","maxNodes","maxConnections","connectionDistance","nodeSpeed","activityTimer","spawnTimer","spawnInterval","nodeChars","server","client","router","database","connectionChars","this","applyDensityConfig","density","applySpeedConfig","speed","initialize","isInitialized","font","concat","fontSize","fontFamily","textBaseline","textAlign","Math","min","gridWidth","gridHeight","createInitialNodes","updateConnections","initialNodeCount","floor","i","createNode","length","nodeTypes","type","random","node","x","randomRange","y","vx","vy","char","getCharForNodeType","color","getColorForNodeType","activity","age","push","chars","currentTheme","forEach","j","node1","node2","distance","getDistance","connectionProbability","connection","from","to","strength","getConnectionChar","getConnectionColor","x1","y1","x2","y2","sqrt","update","deltaTime","deltaSeconds","updateNodes","updateConnectionActivity","index","clamp","sin","render","fillStyle","getBackgroundColor","fillRect","canvas","width","height","renderConnections","renderNodes","renderNetworkInfo","fromNode","toNode","dx","dy","steps","stepX","stepY","alpha","applyAlpha","flowChar","drawChar","info","getInfoColor","startsWith","r","parseInt","slice","g","b","replace","onResize","filter","setConfig","cleanup","animationState","getAnimationState","nodeCount","connectionCount","averageActivity","reduce","sum"],"sourceRoot":""}