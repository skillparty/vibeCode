{"version":3,"file":"static/js/403.fceb8bba.chunk.js","mappings":"kKAcO,MAAMA,UAAmBC,EAAAA,EAqE9BC,WAAAA,CAAYC,EAA+BC,GACzCC,MAAMF,EAAKC,EAAQ,eAAe,KArE5BE,YAAwB,GAAG,KAC3BC,SAAqB,GAAG,KACxBC,WAAqB,EAAE,KACvBC,YAAsB,EAAE,KACxBC,eAAyB,IAAK,KAC9BC,OAAiB,GAAG,KACpBC,kBAA4B,EAAE,KAC9BC,eAAyB,EAAE,KAC3BC,WAAqB,EAAE,KACvBC,cAAwB,IAEhC,KACQC,UAAY,CAClBC,OAAQ,CAAC,SAAK,SAAK,SAAK,SAAK,KAC7BC,QAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KACnCC,QAAS,CAAC,IAAK,IAAK,IAAK,IAAK,KAC9BC,OAAQ,CAAC,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,MACjD,KACMC,eAA2BC,KAAKN,UAAUC,OAElD,KACQM,SAAW,CACjBC,OAAQ,CACN,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAETC,QAAS,CACP,CAAC,EAAG,EAAG,IAETC,KAAM,CACJ,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZC,OAAQ,CACN,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZC,OAAQ,CACN,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAE3BC,UAAW,CACT,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACvE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,E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","sources":["utils/ConwayLife.ts"],"sourcesContent":["import { BasePattern } from './BasePattern';\nimport { PatternConfig } from '../types';\n\ninterface Cell {\n  alive: boolean;\n  age: number;\n  char: string;\n  color: string;\n}\n\n/**\n * ConwayLife pattern implements Conway's Game of Life cellular automaton\n * Features different cell representations, aging effects, and pattern seeding\n */\nexport class ConwayLife extends BasePattern {\n  private currentGrid: Cell[][] = [];\n  private nextGrid: Cell[][] = [];\n  private generation: number = 0;\n  private updateTimer: number = 0;\n  private updateInterval: number = 200; // milliseconds between generations\n  private maxAge: number = 10;\n  private stableGenerations: number = 0;\n  private lastPopulation: number = 0;\n  private resetTimer: number = 0;\n  private resetInterval: number = 30000; // Reset after 30 seconds of stability\n  \n  // Different character sets for cell representation\n  private cellChars = {\n    simple: ['█', '▓', '▒', '░', ' '],\n    organic: ['@', '#', '*', 'o', '.', ' '],\n    digital: ['1', '0', '1', '0', ' '],\n    blocks: ['█', '▉', '▊', '▋', '▌', '▍', '▎', '▏', ' ']\n  };\n  private currentCharSet: string[] = this.cellChars.simple;\n  \n  // Famous Conway's Life patterns for seeding\n  private patterns = {\n    glider: [\n      [0, 1, 0],\n      [0, 0, 1],\n      [1, 1, 1]\n    ],\n    blinker: [\n      [1, 1, 1]\n    ],\n    toad: [\n      [0, 1, 1, 1],\n      [1, 1, 1, 0]\n    ],\n    beacon: [\n      [1, 1, 0, 0],\n      [1, 1, 0, 0],\n      [0, 0, 1, 1],\n      [0, 0, 1, 1]\n    ],\n    pulsar: [\n      [0,0,1,1,1,0,0,0,1,1,1,0,0],\n      [0,0,0,0,0,0,0,0,0,0,0,0,0],\n      [1,0,0,0,0,1,0,1,0,0,0,0,1],\n      [1,0,0,0,0,1,0,1,0,0,0,0,1],\n      [1,0,0,0,0,1,0,1,0,0,0,0,1],\n      [0,0,1,1,1,0,0,0,1,1,1,0,0],\n      [0,0,0,0,0,0,0,0,0,0,0,0,0],\n      [0,0,1,1,1,0,0,0,1,1,1,0,0],\n      [1,0,0,0,0,1,0,1,0,0,0,0,1],\n      [1,0,0,0,0,1,0,1,0,0,0,0,1],\n      [1,0,0,0,0,1,0,1,0,0,0,0,1],\n      [0,0,0,0,0,0,0,0,0,0,0,0,0],\n      [0,0,1,1,1,0,0,0,1,1,1,0,0]\n    ],\n    gosperGun: [\n      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],\n      [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],\n      [1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n      [1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    ]\n  };\n  \n  constructor(ctx: CanvasRenderingContext2D, config: PatternConfig) {\n    super(ctx, config, 'conway-life');\n    this.applySpeedConfig(config.speed || 'medium');\n    this.applyComplexityConfig(config.complexity || 'medium');\n  }\n  \n  public initialize(): void {\n    this.isInitialized = true;\n    this.generation = 0;\n    this.updateTimer = 0;\n    this.stableGenerations = 0;\n    this.lastPopulation = 0;\n    this.resetTimer = 0;\n    \n    // Set canvas properties\n    this.ctx.font = `${this.config.fontSize || 12}px ${this.config.fontFamily || 'Courier New, Monaco, Consolas, monospace'}`;\n    this.ctx.textBaseline = 'top';\n    this.ctx.textAlign = 'left';\n    \n    // Initialize grids\n    this.initializeGrids();\n    \n    // Seed with random patterns\n    this.seedRandomPatterns();\n  }\n  \n  private initializeGrids(): void {\n    this.currentGrid = [];\n    this.nextGrid = [];\n    \n    for (let y = 0; y < this.gridHeight; y++) {\n      this.currentGrid[y] = [];\n      this.nextGrid[y] = [];\n      \n      for (let x = 0; x < this.gridWidth; x++) {\n        this.currentGrid[y][x] = {\n          alive: false,\n          age: 0,\n          char: ' ',\n          color: '#000000'\n        };\n        \n        this.nextGrid[y][x] = {\n          alive: false,\n          age: 0,\n          char: ' ',\n          color: '#000000'\n        };\n      }\n    }\n  }\n  \n  private seedRandomPatterns(): void {\n    const patternNames = Object.keys(this.patterns);\n    const numPatterns = Math.floor(2 + this.getDensityMultiplier() * 4); // 2-6 patterns\n    \n    for (let i = 0; i < numPatterns; i++) {\n      const patternName = patternNames[Math.floor(Math.random() * patternNames.length)];\n      const pattern = this.patterns[patternName as keyof typeof this.patterns];\n      \n      // Random position for pattern\n      const startX = Math.floor(Math.random() * (this.gridWidth - pattern[0].length));\n      const startY = Math.floor(Math.random() * (this.gridHeight - pattern.length));\n      \n      this.placePattern(pattern, startX, startY);\n    }\n    \n    // Add some random noise\n    const noiseLevel = 0.1 * this.getDensityMultiplier();\n    for (let y = 0; y < this.gridHeight; y++) {\n      for (let x = 0; x < this.gridWidth; x++) {\n        if (Math.random() < noiseLevel) {\n          this.currentGrid[y][x].alive = true;\n          this.currentGrid[y][x].age = 0;\n        }\n      }\n    }\n    \n    this.updateCellAppearance();\n  }\n  \n  private placePattern(pattern: number[][], startX: number, startY: number): void {\n    for (let y = 0; y < pattern.length; y++) {\n      for (let x = 0; x < pattern[y].length; x++) {\n        const gridX = startX + x;\n        const gridY = startY + y;\n        \n        if (gridX >= 0 && gridX < this.gridWidth && gridY >= 0 && gridY < this.gridHeight) {\n          if (pattern[y][x] === 1) {\n            this.currentGrid[gridY][gridX].alive = true;\n            this.currentGrid[gridY][gridX].age = 0;\n          }\n        }\n      }\n    }\n  }\n  \n  public update(deltaTime: number): void {\n    if (!this.isInitialized) return;\n    \n    this.updateTimer += deltaTime;\n    this.resetTimer += deltaTime;\n    \n    // Update generation\n    if (this.updateTimer >= this.updateInterval) {\n      this.nextGeneration();\n      this.updateTimer = 0;\n    }\n    \n    // Check for reset conditions\n    if (this.resetTimer >= this.resetInterval || this.stableGenerations > 50) {\n      this.resetSimulation();\n    }\n  }\n  \n  private nextGeneration(): void {\n    // Calculate next generation using Conway's rules\n    let population = 0;\n    \n    for (let y = 0; y < this.gridHeight; y++) {\n      for (let x = 0; x < this.gridWidth; x++) {\n        const neighbors = this.countNeighbors(x, y);\n        const currentCell = this.currentGrid[y][x];\n        const nextCell = this.nextGrid[y][x];\n        \n        // Conway's Game of Life rules\n        if (currentCell.alive) {\n          // Live cell with 2 or 3 neighbors survives\n          nextCell.alive = neighbors === 2 || neighbors === 3;\n          nextCell.age = nextCell.alive ? currentCell.age + 1 : 0;\n        } else {\n          // Dead cell with exactly 3 neighbors becomes alive\n          nextCell.alive = neighbors === 3;\n          nextCell.age = nextCell.alive ? 0 : 0;\n        }\n        \n        if (nextCell.alive) {\n          population++;\n        }\n        \n        // Limit age to prevent overflow\n        nextCell.age = Math.min(nextCell.age, this.maxAge);\n      }\n    }\n    \n    // Swap grids\n    [this.currentGrid, this.nextGrid] = [this.nextGrid, this.currentGrid];\n    \n    // Update generation counter and stability tracking\n    this.generation++;\n    \n    if (Math.abs(population - this.lastPopulation) < 5) {\n      this.stableGenerations++;\n    } else {\n      this.stableGenerations = 0;\n    }\n    \n    this.lastPopulation = population;\n    \n    // Update cell appearance\n    this.updateCellAppearance();\n  }\n  \n  private countNeighbors(x: number, y: number): number {\n    let count = 0;\n    \n    for (let dy = -1; dy <= 1; dy++) {\n      for (let dx = -1; dx <= 1; dx++) {\n        if (dx === 0 && dy === 0) continue; // Skip center cell\n        \n        const nx = x + dx;\n        const ny = y + dy;\n        \n        // Handle wrapping (toroidal topology)\n        const wrappedX = (nx + this.gridWidth) % this.gridWidth;\n        const wrappedY = (ny + this.gridHeight) % this.gridHeight;\n        \n        if (this.currentGrid[wrappedY][wrappedX].alive) {\n          count++;\n        }\n      }\n    }\n    \n    return count;\n  }\n  \n  private updateCellAppearance(): void {\n    for (let y = 0; y < this.gridHeight; y++) {\n      for (let x = 0; x < this.gridWidth; x++) {\n        const cell = this.currentGrid[y][x];\n        \n        if (cell.alive) {\n          cell.char = this.getCharForAge(cell.age);\n          cell.color = this.getColorForAge(cell.age);\n        } else {\n          cell.char = ' ';\n          cell.color = '#000000';\n        }\n      }\n    }\n  }\n  \n  private getCharForAge(age: number): string {\n    const ageRatio = Math.min(age / this.maxAge, 1);\n    const charIndex = Math.floor(ageRatio * (this.currentCharSet.length - 1));\n    return this.currentCharSet[charIndex];\n  }\n  \n  private getColorForAge(age: number): string {\n    const theme = this.config.currentTheme || 'matrix';\n    const ageRatio = Math.min(age / this.maxAge, 1);\n    \n    switch (theme) {\n      case 'matrix':\n        // Young cells are bright green, older cells fade to dark green\n        const green = Math.floor(255 * (1 - ageRatio * 0.7));\n        return `rgb(0, ${green}, 0)`;\n      case 'terminal':\n        const termGreen = Math.floor(255 * (0.8 - ageRatio * 0.5));\n        return `rgb(0, ${termGreen}, 0)`;\n      case 'retro':\n        // Young cells are bright orange, older cells fade to red\n        const red = Math.floor(255 * (0.6 + ageRatio * 0.4));\n        const orange = Math.floor(107 * (1 - ageRatio * 0.6));\n        return `rgb(${red}, ${orange}, 53)`;\n      case 'blue':\n        // Young cells are bright blue, older cells fade to dark blue\n        const blue = Math.floor(255 * (1 - ageRatio * 0.6));\n        const cyan = Math.floor(191 * (0.8 - ageRatio * 0.4));\n        return `rgb(0, ${cyan}, ${blue})`;\n      default:\n        return '#00ff00';\n    }\n  }\n  \n  private resetSimulation(): void {\n    this.generation = 0;\n    this.stableGenerations = 0;\n    this.lastPopulation = 0;\n    this.resetTimer = 0;\n    \n    // Clear grid\n    for (let y = 0; y < this.gridHeight; y++) {\n      for (let x = 0; x < this.gridWidth; x++) {\n        this.currentGrid[y][x].alive = false;\n        this.currentGrid[y][x].age = 0;\n      }\n    }\n    \n    // Seed new patterns\n    this.seedRandomPatterns();\n  }\n  \n  public render(): void {\n    // Clear canvas with black background\n    this.ctx.fillStyle = '#000000';\n    this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    \n    if (!this.isInitialized) return;\n    \n    // Render cells\n    for (let y = 0; y < this.gridHeight; y++) {\n      for (let x = 0; x < this.gridWidth; x++) {\n        const cell = this.currentGrid[y][x];\n        \n        if (cell.alive && cell.char !== ' ') {\n          this.ctx.fillStyle = cell.color;\n          this.drawChar(cell.char, x, y);\n        }\n      }\n    }\n    \n    // Render info overlay\n    this.renderInfoOverlay();\n  }\n  \n  private renderInfoOverlay(): void {\n    if (this.gridHeight < 2 || this.gridWidth < 20) return;\n    \n    const info = `Conway's Life | Gen: ${this.generation} | Pop: ${this.lastPopulation}`;\n    \n    // Render info text\n    this.ctx.fillStyle = this.getInfoColor();\n    for (let i = 0; i < Math.min(info.length, this.gridWidth); i++) {\n      this.drawChar(info[i], i, this.gridHeight - 1);\n    }\n  }\n  \n  private getInfoColor(): string {\n    switch (this.config.currentTheme || 'matrix') {\n      case 'matrix': return '#004400';\n      case 'terminal': return '#004400';\n      case 'retro': return '#662200';\n      case 'blue': return '#002244';\n      default: return '#004400';\n    }\n  }\n  \n  private applySpeedConfig(speed: string): void {\n    switch (speed) {\n      case 'slow':\n        this.updateInterval = 500;\n        this.resetInterval = 45000;\n        break;\n      case 'medium':\n        this.updateInterval = 200;\n        this.resetInterval = 30000;\n        break;\n      case 'fast':\n        this.updateInterval = 100;\n        this.resetInterval = 15000;\n        break;\n    }\n  }\n  \n  private applyComplexityConfig(complexity: string): void {\n    switch (complexity) {\n      case 'low':\n        this.currentCharSet = this.cellChars.simple;\n        this.maxAge = 5;\n        break;\n      case 'medium':\n        this.currentCharSet = this.cellChars.organic;\n        this.maxAge = 10;\n        break;\n      case 'high':\n        this.currentCharSet = this.cellChars.blocks;\n        this.maxAge = 15;\n        break;\n    }\n  }\n  \n  public onResize(gridWidth: number, gridHeight: number): void {\n    super.onResize(gridWidth, gridHeight);\n    if (this.isInitialized) {\n      this.initializeGrids();\n      this.seedRandomPatterns();\n    }\n  }\n  \n  public setConfig(config: Partial<PatternConfig>): void {\n    super.setConfig(config);\n    \n    if (config.speed) {\n      this.applySpeedConfig(config.speed);\n    }\n    \n    if (config.complexity) {\n      this.applyComplexityConfig(config.complexity);\n      if (this.isInitialized) {\n        this.updateCellAppearance();\n      }\n    }\n  }\n  \n  public cleanup(): void {\n    this.isInitialized = false;\n    this.currentGrid = [];\n    this.nextGrid = [];\n    this.generation = 0;\n    this.updateTimer = 0;\n    this.stableGenerations = 0;\n    this.lastPopulation = 0;\n    this.resetTimer = 0;\n    this.animationState = {};\n  }\n  \n  /**\n   * Get current animation state for debugging\n   */\n  public getAnimationState(): any {\n    return {\n      generation: this.generation,\n      population: this.lastPopulation,\n      stableGenerations: this.stableGenerations,\n      updateInterval: this.updateInterval,\n      maxAge: this.maxAge,\n      resetProgress: this.resetTimer / this.resetInterval\n    };\n  }\n}"],"names":["ConwayLife","BasePattern","constructor","ctx","config","super","currentGrid","nextGrid","generation","updateTimer","updateInterval","maxAge","stableGenerations","lastPopulation","resetTimer","resetInterval","cellChars","simple","organic","digital","blocks","currentCharSet","this","patterns","glider","blinker","toad","beacon","pulsar","gosperGun","applySpeedConfig","speed","applyComplexityConfig","complexity","initialize","isInitialized","font","concat","fontSize","fontFamily","textBaseline","textAlign","initializeGrids","seedRandomPatterns","y","gridHeight","x","gridWidth","alive","age","char","color","patternNames","Object","keys","numPatterns","Math","floor","getDensityMultiplier","i","patternName","random","length","pattern","startX","startY","placePattern","noiseLevel","updateCellAppearance","gridX","gridY","update","deltaTime","nextGeneration","resetSimulation","population","neighbors","countNeighbors","currentCell","nextCell","min","abs","count","dy","dx","ny","wrappedX","wrappedY","cell","getCharForAge","getColorForAge","ageRatio","charIndex","theme","currentTheme","green","termGreen","red","orange","blue","cyan","render","fillStyle","fillRect","canvas","width","height","drawChar","renderInfoOverlay","info","getInfoColor","onResize","setConfig","cleanup","animationState","getAnimationState","resetProgress"],"sourceRoot":""}