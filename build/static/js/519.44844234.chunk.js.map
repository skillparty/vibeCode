{"version":3,"file":"static/js/519.44844234.chunk.js","mappings":"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","sources":["utils/CodeFlow.ts"],"sourcesContent":["import { BasePattern } from './BasePattern';\nimport { PatternConfig } from '../types';\n\ninterface CodeLine {\n  text: string;\n  y: number;\n  speed: number;\n  color: string;\n  indent: number;\n  type: 'comment' | 'function' | 'variable' | 'keyword' | 'string' | 'operator';\n}\n\n/**\n * CodeFlow pattern simulates scrolling code with syntax highlighting\n * Features realistic code snippets with proper indentation and colors\n */\nexport class CodeFlow extends BasePattern {\n  private codeLines: CodeLine[] = [];\n  private scrollSpeed: number = 20; // pixels per second\n  private lineHeight: number = 1.2;\n  private maxLines: number = 50;\n  private spawnTimer: number = 0;\n  private spawnInterval: number = 200; // milliseconds between new lines\n  \n  private codeSnippets: Array<{text: string, type: 'comment' | 'function' | 'variable' | 'keyword' | 'string' | 'operator', indent: number}> = [\n    // JavaScript/TypeScript snippets\n    { text: '// Initialize the application', type: 'comment', indent: 0 },\n    { text: 'function initializeApp() {', type: 'function', indent: 0 },\n    { text: '  const config = loadConfig();', type: 'variable', indent: 1 },\n    { text: '  if (config.debug) {', type: 'keyword', indent: 1 },\n    { text: '    console.log(\"Debug mode enabled\");', type: 'string', indent: 2 },\n    { text: '  }', type: 'keyword', indent: 1 },\n    { text: '  return setupRoutes(config);', type: 'function', indent: 1 },\n    { text: '}', type: 'function', indent: 0 },\n    \n    // Python snippets\n    { text: '# Data processing pipeline', type: 'comment', indent: 0 },\n    { text: 'def process_data(data_frame):', type: 'function', indent: 0 },\n    { text: '    cleaned_data = data_frame.dropna()', type: 'variable', indent: 1 },\n    { text: '    for column in cleaned_data.columns:', type: 'keyword', indent: 1 },\n    { text: '        if column.startswith(\"temp_\"):', type: 'keyword', indent: 2 },\n    { text: '            cleaned_data[column] *= 1.8 + 32', type: 'operator', indent: 3 },\n    { text: '    return cleaned_data', type: 'keyword', indent: 1 },\n    \n    // Java snippets\n    { text: '// Service layer implementation', type: 'comment', indent: 0 },\n    { text: 'public class UserService {', type: 'keyword', indent: 0 },\n    { text: '  private final UserRepository repository;', type: 'variable', indent: 1 },\n    { text: '  public User findById(Long id) {', type: 'function', indent: 1 },\n    { text: '    return repository.findById(id)', type: 'function', indent: 2 },\n    { text: '      .orElseThrow(() -> new UserNotFoundException());', type: 'function', indent: 3 },\n    { text: '  }', type: 'function', indent: 1 },\n    { text: '}', type: 'keyword', indent: 0 },\n    \n    // Go snippets\n    { text: '// HTTP handler function', type: 'comment', indent: 0 },\n    { text: 'func handleRequest(w http.ResponseWriter, r *http.Request) {', type: 'function', indent: 0 },\n    { text: '  var request RequestData', type: 'variable', indent: 1 },\n    { text: '  if err := json.NewDecoder(r.Body).Decode(&request); err != nil {', type: 'keyword', indent: 1 },\n    { text: '    http.Error(w, \"Invalid JSON\", http.StatusBadRequest)', type: 'function', indent: 2 },\n    { text: '    return', type: 'keyword', indent: 2 },\n    { text: '  }', type: 'keyword', indent: 1 },\n    { text: '  processRequest(request)', type: 'function', indent: 1 },\n    { text: '}', type: 'function', indent: 0 },\n    \n    // Rust snippets\n    { text: '// Memory-safe data processing', type: 'comment', indent: 0 },\n    { text: 'impl<T> DataProcessor<T> where T: Clone + Send {', type: 'keyword', indent: 0 },\n    { text: '  pub fn process(&self, data: Vec<T>) -> Result<Vec<T>, ProcessError> {', type: 'function', indent: 1 },\n    { text: '    let mut results = Vec::with_capacity(data.len());', type: 'variable', indent: 2 },\n    { text: '    for item in data.iter() {', type: 'keyword', indent: 2 },\n    { text: '      match self.transform(item.clone()) {', type: 'keyword', indent: 3 },\n    { text: '        Ok(transformed) => results.push(transformed),', type: 'operator', indent: 4 },\n    { text: '        Err(e) => return Err(e),', type: 'keyword', indent: 4 },\n    { text: '      }', type: 'keyword', indent: 3 },\n    { text: '    }', type: 'keyword', indent: 2 },\n    { text: '    Ok(results)', type: 'keyword', indent: 2 },\n    { text: '  }', type: 'function', indent: 1 },\n    { text: '}', type: 'keyword', indent: 0 }\n  ];\n  \n  constructor(ctx: CanvasRenderingContext2D, config: PatternConfig) {\n    super(ctx, config, 'code-flow');\n    this.applySpeedConfig(config.speed || 'medium');\n  }\n  \n  public initialize(): void {\n    this.isInitialized = true;\n    this.codeLines = [];\n    this.spawnTimer = 0;\n    \n    // Set canvas properties for code display\n    this.ctx.font = `${this.config.fontSize || 12}px ${this.config.fontFamily || 'Courier New, Monaco, Consolas, monospace'}`;\n    this.ctx.textBaseline = 'top';\n    this.ctx.textAlign = 'left';\n    \n    // Calculate line height in grid units\n    this.lineHeight = 1.2;\n    \n    // Spawn initial lines\n    for (let i = 0; i < Math.min(10, this.gridHeight); i++) {\n      this.spawnCodeLine(-i * this.lineHeight);\n    }\n  }\n  \n  private spawnCodeLine(startY?: number): void {\n    if (this.codeLines.length >= this.maxLines) {\n      return;\n    }\n    \n    const snippet = this.getRandomCodeSnippet();\n    const indentSpaces = '  '.repeat(snippet.indent);\n    const fullText = indentSpaces + snippet.text;\n    \n    const codeLine: CodeLine = {\n      text: fullText,\n      y: startY !== undefined ? startY : -this.lineHeight,\n      speed: this.scrollSpeed * this.getSpeedMultiplier() * this.randomRange(0.8, 1.2),\n      color: this.getColorForType(snippet.type),\n      indent: snippet.indent,\n      type: snippet.type\n    };\n    \n    this.codeLines.push(codeLine);\n  }\n  \n  private getRandomCodeSnippet() {\n    return this.codeSnippets[Math.floor(Math.random() * this.codeSnippets.length)];\n  }\n  \n  private getColorForType(type: string): string {\n    const theme = this.config.currentTheme || 'matrix';\n    \n    switch (theme) {\n      case 'matrix':\n        switch (type) {\n          case 'comment': return '#008800';\n          case 'function': return '#00ff00';\n          case 'variable': return '#88ff88';\n          case 'keyword': return '#00cc00';\n          case 'string': return '#44ff44';\n          case 'operator': return '#66ff66';\n          default: return '#00ff00';\n        }\n      case 'terminal':\n        switch (type) {\n          case 'comment': return '#888888';\n          case 'function': return '#00ff00';\n          case 'variable': return '#ffff00';\n          case 'keyword': return '#ff8800';\n          case 'string': return '#88ff88';\n          case 'operator': return '#ff4444';\n          default: return '#00ff00';\n        }\n      case 'retro':\n        switch (type) {\n          case 'comment': return '#cc8800';\n          case 'function': return '#ff6b35';\n          case 'variable': return '#ffaa00';\n          case 'keyword': return '#ff4400';\n          case 'string': return '#ff8844';\n          case 'operator': return '#ffcc44';\n          default: return '#ff6b35';\n        }\n      case 'blue':\n        switch (type) {\n          case 'comment': return '#4488cc';\n          case 'function': return '#00bfff';\n          case 'variable': return '#88ccff';\n          case 'keyword': return '#0088cc';\n          case 'string': return '#44aaff';\n          case 'operator': return '#66bbff';\n          default: return '#00bfff';\n        }\n      default:\n        return '#00ff00';\n    }\n  }\n  \n  public update(deltaTime: number): void {\n    if (!this.isInitialized) return;\n    \n    const deltaSeconds = deltaTime / 1000;\n    \n    // Update spawn timer\n    this.spawnTimer += deltaTime;\n    \n    // Spawn new lines periodically\n    if (this.spawnTimer >= this.spawnInterval) {\n      this.spawnCodeLine();\n      this.spawnTimer = 0;\n      \n      // Vary spawn interval slightly for more natural flow\n      this.spawnInterval = 200 + this.randomRange(-50, 100);\n    }\n    \n    // Update existing lines\n    for (let i = this.codeLines.length - 1; i >= 0; i--) {\n      const line = this.codeLines[i];\n      line.y += line.speed * deltaSeconds;\n      \n      // Remove lines that have scrolled off screen\n      if (line.y > this.gridHeight + 2) {\n        this.codeLines.splice(i, 1);\n      }\n    }\n  }\n  \n  public render(): void {\n    // Clear canvas with dark background\n    this.ctx.fillStyle = this.getBackgroundColor();\n    this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    \n    if (!this.isInitialized) return;\n    \n    // Render all code lines\n    this.codeLines.forEach(line => {\n      this.renderCodeLine(line);\n    });\n    \n    // Add subtle scan lines effect\n    this.renderScanLines();\n  }\n  \n  private renderCodeLine(line: CodeLine): void {\n    const y = Math.floor(line.y);\n    \n    // Skip lines that are completely off screen\n    if (y < -2 || y >= this.gridHeight + 2) {\n      return;\n    }\n    \n    // Apply fade effect for lines near edges\n    let alpha = 1.0;\n    if (y < 2) {\n      alpha = Math.max(0, (y + 2) / 4);\n    } else if (y > this.gridHeight - 3) {\n      alpha = Math.max(0, (this.gridHeight - y + 1) / 4);\n    }\n    \n    // Set color with alpha\n    this.ctx.fillStyle = this.applyAlpha(line.color, alpha);\n    \n    // Render each character of the line\n    const maxChars = Math.min(line.text.length, this.gridWidth);\n    for (let i = 0; i < maxChars; i++) {\n      const char = line.text[i];\n      \n      // Add slight character-level effects\n      if (line.type === 'comment' && Math.random() < 0.02) {\n        // Occasional flicker for comments\n        continue;\n      }\n      \n      this.drawChar(char, i, y);\n    }\n    \n    // Add cursor effect for function declarations\n    if (line.type === 'function' && line.text.includes('{') && alpha > 0.8) {\n      const cursorX = Math.min(line.text.length, this.gridWidth - 1);\n      this.ctx.fillStyle = this.applyAlpha('#ffffff', alpha * 0.7);\n      this.drawChar('_', cursorX, y);\n    }\n  }\n  \n  private renderScanLines(): void {\n    // Add subtle horizontal scan lines for retro effect\n    this.ctx.fillStyle = 'rgba(255, 255, 255, 0.02)';\n    \n    for (let y = 0; y < this.gridHeight; y += 2) {\n      const pixelY = y * this.charHeight;\n      this.ctx.fillRect(0, pixelY, this.ctx.canvas.width, 1);\n    }\n  }\n  \n  private getBackgroundColor(): string {\n    switch (this.config.currentTheme || 'matrix') {\n      case 'matrix': return '#000000';\n      case 'terminal': return '#001100';\n      case 'retro': return '#1a0a00';\n      case 'blue': return '#000811';\n      default: return '#000000';\n    }\n  }\n  \n  private applyAlpha(color: string, alpha: number): string {\n    // Convert hex color to rgba with alpha\n    if (color.startsWith('#')) {\n      const r = parseInt(color.slice(1, 3), 16);\n      const g = parseInt(color.slice(3, 5), 16);\n      const b = parseInt(color.slice(5, 7), 16);\n      return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n    }\n    \n    // If already rgba, modify alpha\n    if (color.startsWith('rgba')) {\n      return color.replace(/[\\d\\.]+\\)$/g, `${alpha})`);\n    }\n    \n    // If rgb, convert to rgba\n    if (color.startsWith('rgb')) {\n      return color.replace('rgb', 'rgba').replace(')', `, ${alpha})`);\n    }\n    \n    return color;\n  }\n  \n  private applySpeedConfig(speed: string): void {\n    switch (speed) {\n      case 'slow':\n        this.scrollSpeed = 10;\n        this.spawnInterval = 400;\n        break;\n      case 'medium':\n        this.scrollSpeed = 20;\n        this.spawnInterval = 200;\n        break;\n      case 'fast':\n        this.scrollSpeed = 35;\n        this.spawnInterval = 100;\n        break;\n    }\n  }\n  \n  public onResize(gridWidth: number, gridHeight: number): void {\n    super.onResize(gridWidth, gridHeight);\n    \n    if (this.isInitialized) {\n      // Remove lines that are now off screen\n      this.codeLines = this.codeLines.filter(line => \n        line.y < gridHeight + 2 && line.y > -2\n      );\n    }\n  }\n  \n  public setConfig(config: Partial<PatternConfig>): void {\n    super.setConfig(config);\n    \n    if (config.speed) {\n      this.applySpeedConfig(config.speed);\n    }\n    \n    // Update colors for existing lines if theme changed\n    if (config.currentTheme) {\n      this.codeLines.forEach(line => {\n        line.color = this.getColorForType(line.type);\n      });\n    }\n  }\n  \n  public cleanup(): void {\n    this.isInitialized = false;\n    this.codeLines = [];\n    this.spawnTimer = 0;\n    this.animationState = {};\n  }\n  \n  /**\n   * Get current animation state for debugging\n   */\n  public getAnimationState(): any {\n    return {\n      lineCount: this.codeLines.length,\n      scrollSpeed: this.scrollSpeed,\n      spawnInterval: this.spawnInterval,\n      averageY: this.codeLines.reduce((sum, line) => sum + line.y, 0) / this.codeLines.length || 0\n    };\n  }\n}"],"names":["CodeFlow","BasePattern","constructor","ctx","config","super","codeLines","scrollSpeed","lineHeight","maxLines","spawnTimer","spawnInterval","codeSnippets","text","type","indent","this","applySpeedConfig","speed","initialize","isInitialized","font","concat","fontSize","fontFamily","textBaseline","textAlign","i","Math","min","gridHeight","spawnCodeLine","startY","length","snippet","getRandomCodeSnippet","codeLine","repeat","y","undefined","getSpeedMultiplier","randomRange","color","getColorForType","push","floor","random","currentTheme","update","deltaTime","deltaSeconds","line","splice","render","fillStyle","getBackgroundColor","fillRect","canvas","width","height","forEach","renderCodeLine","renderScanLines","alpha","max","applyAlpha","maxChars","gridWidth","char","drawChar","includes","cursorX","pixelY","charHeight","startsWith","r","parseInt","slice","g","b","replace","onResize","filter","setConfig","cleanup","animationState","getAnimationState","lineCount","averageY","reduce","sum"],"sourceRoot":""}