{"version":3,"file":"static/js/740.3140062c.chunk.js","mappings":"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","sources":["utils/TerminalCursor.ts"],"sourcesContent":["import { BasePattern } from './BasePattern';\nimport { PatternConfig } from '../types';\n\ninterface TerminalLine {\n  text: string;\n  cursorPosition: number;\n  isComplete: boolean;\n  age: number;\n}\n\n/**\n * TerminalCursor pattern simulates a terminal with blinking cursor and typing effects\n * Features realistic typing animation with variable speeds and command-like text\n */\nexport class TerminalCursor extends BasePattern {\n  private lines: TerminalLine[] = [];\n  private currentLine: number = 0;\n  private cursorVisible: boolean = true;\n  private cursorBlinkTimer: number = 0;\n  private cursorBlinkInterval: number = 500; // Blink every 500ms\n  private typingTimer: number = 0;\n  private typingSpeed: number = 100; // Characters per minute\n  private maxLines: number = 20;\n  private terminalCommands: string[] = [\n    'npm install --save-dev typescript',\n    'git commit -m \"feat: implement new feature\"',\n    'docker build -t myapp:latest .',\n    'kubectl apply -f deployment.yaml',\n    'yarn test --coverage',\n    'eslint src/**/*.ts --fix',\n    'webpack --mode production',\n    'node server.js --port 3000',\n    'python manage.py migrate',\n    'cargo build --release',\n    'go mod tidy && go build',\n    'mvn clean install -DskipTests',\n    'composer install --no-dev',\n    'rails db:migrate RAILS_ENV=production',\n    'make clean && make all',\n    'terraform apply -auto-approve',\n    'ansible-playbook deploy.yml',\n    'ssh user@server \"systemctl restart nginx\"',\n    'curl -X POST https://api.example.com/data',\n    'grep -r \"TODO\" src/ --include=\"*.ts\"'\n  ];\n  private prompt: string = '$ ';\n  private backgroundColor: string = '#000000';\n  private textColor: string = '#00ff00';\n  private cursorColor: string = '#ffffff';\n  \n  constructor(ctx: CanvasRenderingContext2D, config: PatternConfig) {\n    super(ctx, config, 'terminal-cursor');\n    this.applyThemeConfig(config.currentTheme || 'matrix');\n    this.applySpeedConfig(config.speed || 'medium');\n  }\n  \n  public initialize(): void {\n    this.isInitialized = true;\n    this.lines = [];\n    this.currentLine = 0;\n    this.cursorVisible = true;\n    this.cursorBlinkTimer = 0;\n    this.typingTimer = 0;\n    \n    // Set canvas properties for terminal effect\n    this.ctx.font = `${this.config.fontSize || 12}px ${this.config.fontFamily || 'Courier New, Monaco, Consolas, monospace'}`;\n    this.ctx.textBaseline = 'top';\n    this.ctx.textAlign = 'left';\n    \n    // Calculate max lines based on grid height\n    this.maxLines = Math.max(10, this.gridHeight - 2);\n    \n    // Start with a few initial lines\n    this.addNewLine();\n  }\n  \n  private addNewLine(): void {\n    if (this.lines.length >= this.maxLines) {\n      // Remove oldest line\n      this.lines.shift();\n    }\n    \n    const command = this.getRandomCommand();\n    const newLine: TerminalLine = {\n      text: this.prompt + command,\n      cursorPosition: this.prompt.length,\n      isComplete: false,\n      age: 0\n    };\n    \n    this.lines.push(newLine);\n    this.currentLine = this.lines.length - 1;\n  }\n  \n  private getRandomCommand(): string {\n    return this.terminalCommands[Math.floor(Math.random() * this.terminalCommands.length)];\n  }\n  \n  public update(deltaTime: number): void {\n    if (!this.isInitialized) return;\n    \n    // Update cursor blink\n    this.cursorBlinkTimer += deltaTime;\n    if (this.cursorBlinkTimer >= this.cursorBlinkInterval) {\n      this.cursorVisible = !this.cursorVisible;\n      this.cursorBlinkTimer = 0;\n    }\n    \n    // Update typing animation\n    this.typingTimer += deltaTime;\n    const typingInterval = 60000 / this.typingSpeed; // Convert to milliseconds per character\n    \n    if (this.typingTimer >= typingInterval && this.lines.length > 0) {\n      this.updateTyping();\n      this.typingTimer = 0;\n    }\n    \n    // Age all lines\n    this.lines.forEach(line => {\n      line.age += deltaTime;\n    });\n  }\n  \n  private updateTyping(): void {\n    const currentLine = this.lines[this.currentLine];\n    if (!currentLine || currentLine.isComplete) {\n      // Start a new line after a delay\n      if (!currentLine || currentLine.age > 2000) { // 2 second delay\n        this.addNewLine();\n      }\n      return;\n    }\n    \n    // Type next character\n    if (currentLine.cursorPosition < currentLine.text.length) {\n      currentLine.cursorPosition++;\n      \n      // Add some randomness to typing speed\n      if (Math.random() < 0.1) {\n        this.typingTimer -= this.typingSpeed * 0.5; // Occasional fast typing\n      } else if (Math.random() < 0.05) {\n        this.typingTimer -= this.typingSpeed * 2; // Occasional pause\n      }\n    } else {\n      // Line is complete\n      currentLine.isComplete = true;\n      currentLine.age = 0; // Reset age for completion delay\n    }\n  }\n  \n  public render(): void {\n    // Clear canvas with terminal background\n    this.ctx.fillStyle = this.backgroundColor;\n    this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    \n    if (!this.isInitialized) return;\n    \n    // Render terminal lines\n    this.ctx.fillStyle = this.textColor;\n    \n    const startY = Math.max(0, this.gridHeight - this.lines.length - 1);\n    \n    this.lines.forEach((line, index) => {\n      const y = startY + index;\n      if (y >= 0 && y < this.gridHeight) {\n        this.renderLine(line, y, index === this.currentLine);\n      }\n    });\n    \n    // Render terminal header/status\n    this.renderTerminalHeader();\n  }\n  \n  private renderLine(line: TerminalLine, y: number, isCurrentLine: boolean): void {\n    // Render typed portion of the line\n    const visibleText = line.text.substring(0, line.cursorPosition);\n    \n    for (let i = 0; i < visibleText.length && i < this.gridWidth; i++) {\n      const char = visibleText[i];\n      let color = this.textColor;\n      \n      // Highlight prompt differently\n      if (i < this.prompt.length) {\n        color = this.getCursorColor();\n      }\n      \n      this.ctx.fillStyle = color;\n      this.drawChar(char, i, y);\n    }\n    \n    // Render cursor if this is the current line and cursor is visible\n    if (isCurrentLine && !line.isComplete && this.cursorVisible) {\n      this.ctx.fillStyle = this.cursorColor;\n      const cursorX = Math.min(line.cursorPosition, this.gridWidth - 1);\n      this.drawChar('█', cursorX, y); // Block cursor\n    }\n    \n    // Add completion indicator\n    if (line.isComplete && isCurrentLine) {\n      const indicatorX = Math.min(line.text.length + 1, this.gridWidth - 1);\n      this.ctx.fillStyle = this.getCompletionColor();\n      this.drawChar('✓', indicatorX, y);\n    }\n  }\n  \n  private renderTerminalHeader(): void {\n    if (this.gridHeight < 3) return;\n    \n    // Render a simple terminal header at the top\n    const headerText = `Terminal - ${this.lines.length} lines`;\n    this.ctx.fillStyle = this.getHeaderColor();\n    \n    for (let i = 0; i < Math.min(headerText.length, this.gridWidth); i++) {\n      this.drawChar(headerText[i], i, 0);\n    }\n    \n    // Render separator line\n    this.ctx.fillStyle = this.textColor;\n    for (let x = 0; x < this.gridWidth; x++) {\n      this.drawChar('-', x, 1);\n    }\n  }\n  \n  private applyThemeConfig(theme: string): void {\n    switch (theme) {\n      case 'matrix':\n        this.backgroundColor = '#000000';\n        this.textColor = '#00ff00';\n        this.cursorColor = '#ffffff';\n        break;\n      case 'terminal':\n        this.backgroundColor = '#000000';\n        this.textColor = '#00ff00';\n        this.cursorColor = '#00ff00';\n        break;\n      case 'retro':\n        this.backgroundColor = '#1a1a1a';\n        this.textColor = '#ff6b35';\n        this.cursorColor = '#ffaa00';\n        break;\n      case 'blue':\n        this.backgroundColor = '#001122';\n        this.textColor = '#00bfff';\n        this.cursorColor = '#ffffff';\n        break;\n      default:\n        this.backgroundColor = '#000000';\n        this.textColor = '#00ff00';\n        this.cursorColor = '#ffffff';\n    }\n  }\n  \n  private applySpeedConfig(speed: string): void {\n    switch (speed) {\n      case 'slow':\n        this.typingSpeed = 60; // 60 characters per minute\n        this.cursorBlinkInterval = 800;\n        break;\n      case 'medium':\n        this.typingSpeed = 120; // 120 characters per minute\n        this.cursorBlinkInterval = 500;\n        break;\n      case 'fast':\n        this.typingSpeed = 200; // 200 characters per minute\n        this.cursorBlinkInterval = 300;\n        break;\n    }\n  }\n  \n  private getCursorColor(): string {\n    return this.cursorColor;\n  }\n  \n  private getCompletionColor(): string {\n    switch (this.config.currentTheme || 'matrix') {\n      case 'matrix': return '#00ff00';\n      case 'terminal': return '#00ff00';\n      case 'retro': return '#ffaa00';\n      case 'blue': return '#00bfff';\n      default: return '#00ff00';\n    }\n  }\n  \n  private getHeaderColor(): string {\n    switch (this.config.currentTheme || 'matrix') {\n      case 'matrix': return '#008800';\n      case 'terminal': return '#008800';\n      case 'retro': return '#cc5500';\n      case 'blue': return '#0088cc';\n      default: return '#008800';\n    }\n  }\n  \n  public onResize(gridWidth: number, gridHeight: number): void {\n    super.onResize(gridWidth, gridHeight);\n    if (this.isInitialized) {\n      this.maxLines = Math.max(10, gridHeight - 2);\n      \n      // Remove excess lines if screen got smaller\n      while (this.lines.length > this.maxLines) {\n        this.lines.shift();\n      }\n      \n      // Adjust current line index\n      this.currentLine = Math.min(this.currentLine, this.lines.length - 1);\n    }\n  }\n  \n  public setConfig(config: Partial<PatternConfig>): void {\n    super.setConfig(config);\n    \n    if (config.currentTheme) {\n      this.applyThemeConfig(config.currentTheme);\n    }\n    \n    if (config.speed) {\n      this.applySpeedConfig(config.speed);\n    }\n  }\n  \n  public cleanup(): void {\n    this.isInitialized = false;\n    this.lines = [];\n    this.currentLine = 0;\n    this.cursorVisible = true;\n    this.cursorBlinkTimer = 0;\n    this.typingTimer = 0;\n    this.animationState = {};\n  }\n  \n  /**\n   * Get current animation state for debugging\n   */\n  public getAnimationState(): any {\n    return {\n      lineCount: this.lines.length,\n      currentLine: this.currentLine,\n      cursorVisible: this.cursorVisible,\n      typingSpeed: this.typingSpeed,\n      currentProgress: this.lines[this.currentLine]?.cursorPosition || 0,\n      totalLength: this.lines[this.currentLine]?.text.length || 0\n    };\n  }\n}"],"names":["TerminalCursor","BasePattern","constructor","ctx","config","super","lines","currentLine","cursorVisible","cursorBlinkTimer","cursorBlinkInterval","typingTimer","typingSpeed","maxLines","terminalCommands","prompt","backgroundColor","textColor","cursorColor","this","applyThemeConfig","currentTheme","applySpeedConfig","speed","initialize","isInitialized","font","concat","fontSize","fontFamily","textBaseline","textAlign","Math","max","gridHeight","addNewLine","length","shift","command","getRandomCommand","newLine","text","cursorPosition","isComplete","age","push","floor","random","update","deltaTime","typingInterval","updateTyping","forEach","line","render","fillStyle","fillRect","canvas","width","height","startY","index","y","renderLine","renderTerminalHeader","isCurrentLine","visibleText","substring","i","gridWidth","char","color","getCursorColor","drawChar","cursorX","min","indicatorX","getCompletionColor","headerText","getHeaderColor","x","theme","onResize","setConfig","cleanup","animationState","getAnimationState","_this$lines$this$curr","_this$lines$this$curr2","lineCount","currentProgress","totalLength"],"sourceRoot":""}