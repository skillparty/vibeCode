{"version":3,"file":"static/js/681.3d8fced5.chunk.js","mappings":"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","sources":["utils/MandelbrotASCII.ts"],"sourcesContent":["import { BasePattern } from './BasePattern';\nimport { PatternConfig } from '../types';\n\ninterface MandelbrotPoint {\n  x: number;\n  y: number;\n  iterations: number;\n  char: string;\n  color: string;\n}\n\n/**\n * MandelbrotASCII pattern renders the Mandelbrot fractal using ASCII density characters\n * Features zooming animation and different character sets for density representation\n */\nexport class MandelbrotASCII extends BasePattern {\n  private mandelbrotGrid: MandelbrotPoint[][] = [];\n  private centerX: number = -0.5;\n  private centerY: number = 0;\n  private zoom: number = 1;\n  private maxIterations: number = 50;\n  private zoomSpeed: number = 0.02;\n  private zoomDirection: number = 1; // 1 for zoom in, -1 for zoom out\n  private minZoom: number = 0.5;\n  private maxZoom: number = 100;\n  private animationTime: number = 0;\n  private colorCycleSpeed: number = 0.001;\n  \n  // ASCII characters ordered by density (light to dark)\n  private densityChars: string = ' .,:;ox%#@';\n  private currentCharSet: string = ' .,:;ox%#@';\n  \n  // Interesting points in the Mandelbrot set to explore\n  private interestingPoints = [\n    { x: -0.5, y: 0, zoom: 1 },           // Main bulb\n    { x: -0.75, y: 0, zoom: 5 },         // Left side detail\n    { x: -0.1, y: 0.8, zoom: 10 },       // Upper spiral\n    { x: -0.7269, y: 0.1889, zoom: 50 }, // Seahorse valley\n    { x: 0.3, y: 0.5, zoom: 20 },        // Right side fractals\n    { x: -0.8, y: 0.156, zoom: 80 },     // Misiurewicz point\n    { x: -0.16, y: 1.04, zoom: 30 },     // Spiral detail\n  ];\n  private currentPointIndex: number = 0;\n  private pointTransitionTimer: number = 0;\n  private pointTransitionDuration: number = 10000; // 10 seconds per point\n  \n  constructor(ctx: CanvasRenderingContext2D, config: PatternConfig) {\n    super(ctx, config, 'mandelbrot-ascii');\n    this.applyComplexityConfig(config.complexity || 'medium');\n    this.applySpeedConfig(config.speed || 'medium');\n  }\n  \n  public initialize(): void {\n    this.isInitialized = true;\n    this.mandelbrotGrid = [];\n    this.animationTime = 0;\n    this.pointTransitionTimer = 0;\n    \n    // Set canvas properties\n    this.ctx.font = `${this.config.fontSize || 12}px ${this.config.fontFamily || 'Courier New, Monaco, Consolas, monospace'}`;\n    this.ctx.textBaseline = 'top';\n    this.ctx.textAlign = 'left';\n    \n    // Initialize grid\n    this.initializeGrid();\n    \n    // Start at first interesting point\n    const startPoint = this.interestingPoints[0];\n    this.centerX = startPoint.x;\n    this.centerY = startPoint.y;\n    this.zoom = startPoint.zoom;\n    \n    // Calculate initial Mandelbrot set\n    this.calculateMandelbrot();\n  }\n  \n  private initializeGrid(): void {\n    this.mandelbrotGrid = [];\n    for (let y = 0; y < this.gridHeight; y++) {\n      this.mandelbrotGrid[y] = [];\n      for (let x = 0; x < this.gridWidth; x++) {\n        this.mandelbrotGrid[y][x] = {\n          x: 0,\n          y: 0,\n          iterations: 0,\n          char: ' ',\n          color: '#000000'\n        };\n      }\n    }\n  }\n  \n  private calculateMandelbrot(): void {\n    const aspectRatio = this.gridWidth / this.gridHeight;\n    const scale = 4 / this.zoom;\n    \n    for (let py = 0; py < this.gridHeight; py++) {\n      for (let px = 0; px < this.gridWidth; px++) {\n        // Convert screen coordinates to complex plane\n        const x0 = this.centerX + (px - this.gridWidth / 2) * scale / this.gridWidth * aspectRatio;\n        const y0 = this.centerY + (py - this.gridHeight / 2) * scale / this.gridHeight;\n        \n        const iterations = this.mandelbrotIterations(x0, y0);\n        const point = this.mandelbrotGrid[py][px];\n        \n        point.x = x0;\n        point.y = y0;\n        point.iterations = iterations;\n        point.char = this.getCharForIterations(iterations);\n        point.color = this.getColorForIterations(iterations);\n      }\n    }\n  }\n  \n  private mandelbrotIterations(x0: number, y0: number): number {\n    let x = 0;\n    let y = 0;\n    let iteration = 0;\n    \n    while (x * x + y * y <= 4 && iteration < this.maxIterations) {\n      const xtemp = x * x - y * y + x0;\n      y = 2 * x * y + y0;\n      x = xtemp;\n      iteration++;\n    }\n    \n    return iteration;\n  }\n  \n  private getCharForIterations(iterations: number): string {\n    if (iterations >= this.maxIterations) {\n      return this.currentCharSet[this.currentCharSet.length - 1]; // Darkest char for set members\n    }\n    \n    // Map iterations to character density\n    const density = iterations / this.maxIterations;\n    const charIndex = Math.floor(density * (this.currentCharSet.length - 1));\n    return this.currentCharSet[Math.min(charIndex, this.currentCharSet.length - 1)];\n  }\n  \n  private getColorForIterations(iterations: number): string {\n    const theme = this.config.currentTheme || 'matrix';\n    \n    if (iterations >= this.maxIterations) {\n      // Points in the set - use theme's primary color\n      switch (theme) {\n        case 'matrix': return '#00ff00';\n        case 'terminal': return '#00ff00';\n        case 'retro': return '#ff6b35';\n        case 'blue': return '#00bfff';\n        default: return '#00ff00';\n      }\n    }\n    \n    // Points outside the set - create gradient based on iterations\n    const ratio = iterations / this.maxIterations;\n    const colorCycle = (this.animationTime * this.colorCycleSpeed + ratio) % 1;\n    \n    switch (theme) {\n      case 'matrix':\n        const green = Math.floor(255 * (0.3 + 0.7 * Math.sin(colorCycle * Math.PI * 2)));\n        return `rgb(0, ${green}, 0)`;\n      case 'terminal':\n        const termGreen = Math.floor(255 * (0.2 + 0.8 * ratio));\n        return `rgb(0, ${termGreen}, 0)`;\n      case 'retro':\n        const red = Math.floor(255 * (0.4 + 0.6 * Math.sin(colorCycle * Math.PI * 2)));\n        const orange = Math.floor(107 * (0.4 + 0.6 * Math.cos(colorCycle * Math.PI * 2)));\n        return `rgb(${red}, ${orange}, 53)`;\n      case 'blue':\n        const blue = Math.floor(255 * (0.3 + 0.7 * Math.sin(colorCycle * Math.PI * 2)));\n        const cyan = Math.floor(191 * (0.3 + 0.7 * Math.cos(colorCycle * Math.PI * 2)));\n        return `rgb(0, ${cyan}, ${blue})`;\n      default:\n        return '#00ff00';\n    }\n  }\n  \n  public update(deltaTime: number): void {\n    if (!this.isInitialized) return;\n    \n    this.animationTime += deltaTime;\n    this.pointTransitionTimer += deltaTime;\n    \n    // Handle point transitions\n    if (this.pointTransitionTimer >= this.pointTransitionDuration) {\n      this.transitionToNextPoint();\n      this.pointTransitionTimer = 0;\n    }\n    \n    // Animate zoom\n    const oldZoom = this.zoom;\n    this.zoom *= (1 + this.zoomSpeed * this.zoomDirection * deltaTime / 1000);\n    \n    // Reverse zoom direction at limits\n    if (this.zoom >= this.maxZoom) {\n      this.zoomDirection = -1;\n      this.zoom = this.maxZoom;\n    } else if (this.zoom <= this.minZoom) {\n      this.zoomDirection = 1;\n      this.zoom = this.minZoom;\n    }\n    \n    // Recalculate if zoom changed significantly\n    if (Math.abs(this.zoom - oldZoom) / oldZoom > 0.05) {\n      this.calculateMandelbrot();\n    }\n    \n    // Update colors for animation effect\n    this.updateColors();\n  }\n  \n  private transitionToNextPoint(): void {\n    this.currentPointIndex = (this.currentPointIndex + 1) % this.interestingPoints.length;\n    const targetPoint = this.interestingPoints[this.currentPointIndex];\n    \n    // Smooth transition to new point\n    this.centerX = targetPoint.x;\n    this.centerY = targetPoint.y;\n    this.zoom = targetPoint.zoom;\n    this.zoomDirection = 1; // Start zooming in at new point\n    \n    this.calculateMandelbrot();\n  }\n  \n  private updateColors(): void {\n    // Update colors based on animation time for dynamic effect\n    for (let y = 0; y < this.gridHeight; y++) {\n      for (let x = 0; x < this.gridWidth; x++) {\n        const point = this.mandelbrotGrid[y][x];\n        point.color = this.getColorForIterations(point.iterations);\n      }\n    }\n  }\n  \n  public render(): void {\n    // Clear canvas with black background\n    this.ctx.fillStyle = '#000000';\n    this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    \n    if (!this.isInitialized) return;\n    \n    // Render the Mandelbrot set\n    for (let y = 0; y < this.gridHeight; y++) {\n      for (let x = 0; x < this.gridWidth; x++) {\n        const point = this.mandelbrotGrid[y][x];\n        \n        if (point.char !== ' ') {\n          this.ctx.fillStyle = point.color;\n          this.drawChar(point.char, x, y);\n        }\n      }\n    }\n    \n    // Render info overlay\n    this.renderInfoOverlay();\n  }\n  \n  private renderInfoOverlay(): void {\n    if (this.gridHeight < 3 || this.gridWidth < 20) return;\n    \n    const currentPoint = this.interestingPoints[this.currentPointIndex];\n    const info = `Mandelbrot | Zoom: ${this.zoom.toFixed(1)}x | Point ${this.currentPointIndex + 1}/${this.interestingPoints.length}`;\n    \n    // Render semi-transparent background for info\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n    const infoWidth = Math.min(info.length, this.gridWidth);\n    for (let i = 0; i < infoWidth; i++) {\n      this.drawChar(' ', i, 0);\n    }\n    \n    // Render info text\n    this.ctx.fillStyle = this.getInfoColor();\n    for (let i = 0; i < Math.min(info.length, this.gridWidth); i++) {\n      this.drawChar(info[i], i, 0);\n    }\n  }\n  \n  private getInfoColor(): string {\n    switch (this.config.currentTheme || 'matrix') {\n      case 'matrix': return '#88ff88';\n      case 'terminal': return '#88ff88';\n      case 'retro': return '#ffaa44';\n      case 'blue': return '#88ccff';\n      default: return '#88ff88';\n    }\n  }\n  \n  private applyComplexityConfig(complexity: string): void {\n    switch (complexity) {\n      case 'low':\n        this.maxIterations = 25;\n        this.currentCharSet = ' .:@';\n        break;\n      case 'medium':\n        this.maxIterations = 50;\n        this.currentCharSet = ' .,:;ox%#@';\n        break;\n      case 'high':\n        this.maxIterations = 100;\n        this.currentCharSet = ' .\\'\",:;il!i><~+_-?][}{1)(|/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$';\n        break;\n    }\n  }\n  \n  private applySpeedConfig(speed: string): void {\n    switch (speed) {\n      case 'slow':\n        this.zoomSpeed = 0.01;\n        this.colorCycleSpeed = 0.0005;\n        this.pointTransitionDuration = 15000;\n        break;\n      case 'medium':\n        this.zoomSpeed = 0.02;\n        this.colorCycleSpeed = 0.001;\n        this.pointTransitionDuration = 10000;\n        break;\n      case 'fast':\n        this.zoomSpeed = 0.04;\n        this.colorCycleSpeed = 0.002;\n        this.pointTransitionDuration = 5000;\n        break;\n    }\n  }\n  \n  public onResize(gridWidth: number, gridHeight: number): void {\n    super.onResize(gridWidth, gridHeight);\n    if (this.isInitialized) {\n      this.initializeGrid();\n      this.calculateMandelbrot();\n    }\n  }\n  \n  public setConfig(config: Partial<PatternConfig>): void {\n    super.setConfig(config);\n    \n    if (config.complexity) {\n      this.applyComplexityConfig(config.complexity);\n      if (this.isInitialized) {\n        this.calculateMandelbrot();\n      }\n    }\n    \n    if (config.speed) {\n      this.applySpeedConfig(config.speed);\n    }\n  }\n  \n  public cleanup(): void {\n    this.isInitialized = false;\n    this.mandelbrotGrid = [];\n    this.animationTime = 0;\n    this.pointTransitionTimer = 0;\n    this.currentPointIndex = 0;\n    this.animationState = {};\n  }\n  \n  /**\n   * Get current animation state for debugging\n   */\n  public getAnimationState(): any {\n    return {\n      zoom: this.zoom,\n      centerX: this.centerX,\n      centerY: this.centerY,\n      currentPoint: this.currentPointIndex,\n      zoomDirection: this.zoomDirection,\n      maxIterations: this.maxIterations,\n      pointTransitionProgress: this.pointTransitionTimer / this.pointTransitionDuration\n    };\n  }\n}"],"names":["MandelbrotASCII","BasePattern","constructor","ctx","config","super","mandelbrotGrid","centerX","centerY","zoom","maxIterations","zoomSpeed","zoomDirection","minZoom","maxZoom","animationTime","colorCycleSpeed","densityChars","currentCharSet","interestingPoints","x","y","currentPointIndex","pointTransitionTimer","pointTransitionDuration","this","applyComplexityConfig","complexity","applySpeedConfig","speed","initialize","isInitialized","font","concat","fontSize","fontFamily","textBaseline","textAlign","initializeGrid","startPoint","calculateMandelbrot","gridHeight","gridWidth","iterations","char","color","aspectRatio","scale","py","px","x0","y0","mandelbrotIterations","point","getCharForIterations","getColorForIterations","iteration","xtemp","length","density","charIndex","Math","floor","min","theme","currentTheme","ratio","colorCycle","green","sin","PI","termGreen","red","orange","cos","blue","cyan","update","deltaTime","transitionToNextPoint","oldZoom","abs","updateColors","targetPoint","render","fillStyle","fillRect","canvas","width","height","drawChar","renderInfoOverlay","info","toFixed","infoWidth","i","getInfoColor","onResize","setConfig","cleanup","animationState","getAnimationState","currentPoint","pointTransitionProgress"],"sourceRoot":""}